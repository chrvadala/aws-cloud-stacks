AWSTemplateFormatVersion: "2010-09-09"

####### PARAMETERS
Parameters:
  env:
    Type: String
    AllowedValues:
      - dev
      - stg
      - prod

  space:
    Type: String
    AllowedPattern: ^[a-z0-9]+$

  Vpc:
    Type: AWS::EC2::VPC::Id

  BastionHostSubnet:
    Type: AWS::EC2::Subnet::Id

  TrustedNetworks:
    Type: String

  BastionHostKeyName:
    Type: AWS::EC2::KeyPair::KeyName

  BastionHostRoute53Zone:
    Type: AWS::Route53::HostedZone::Id

  BastionHostRole:
    Type: String
    Description: Bastion Host Role (needed the following actions ["route53:ChangeResourceRecordSets", "route53:GetHostedZone"])

####### MAPPINGS
Mappings:
  BastionHostAMI:
    us-east-1:
      HVM64: ami-042e8287309f5df03


####### RESOURCES
Resources:
  BastionHostSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref Vpc
      GroupDescription: Allow inbound traffic from trusted networks
      SecurityGroupIngress:
        - SourcePrefixListId: !Ref TrustedNetworks
          FromPort: 22
          ToPort: 22
          IpProtocol: tcp
          Description: Allow incoming SSH traffic from trusted network
      Tags:
        - Key: Name
          Value: !Sub "${env}-${space}-bastion-host-sg-0"
        - Key: env
          Value: !Ref env
        - Key: space
          Value: !Ref space

  BastionHost:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !FindInMap [ BastionHostAMI, !Ref "AWS::Region", HVM64 ]
      InstanceType: t2.micro
      KeyName: !Ref BastionHostKeyName
      IamInstanceProfile: !Ref BastionHostRole
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            DeleteOnTermination: True
            VolumeSize: 8
            VolumeType: standard
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: "0"
          GroupSet:
            - !Ref BastionHostSecurityGroup
          SubnetId: !Ref BastionHostSubnet
      Tags:
        - Key: Name
          Value: !Sub "${env}-${space}-bastion-host"
        - Key: env
          Value: !Ref env
        - Key: space
          Value: !Ref space
      UserData:
        'Fn::Base64': !Sub |
          #!/bin/bash -ex
          sudo hostname ${env}-${space}-bastion-host
          echo ${env}-${space}-bastion-host > /etc/hostname
          sudo apt update
          sudo apt -y install python3-pip python-setuptools awscli
          sudo pip3 install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-py3-latest.tar.gz
          sudo /usr/local/bin/cfn-init -v --stack ${AWS::StackName} --resource BastionHost --region ${AWS::Region}
          sudo /usr/local/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource BastionHost --region ${AWS::Region}

    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          default: [ Init, Install ]

        Init:
          files:
            "/etc/systemd/system/cfn-hup.service":
              mode: "000700"
              owner: "root"
              group: "root"
              content: |
                [Service]
                User=root
                ExecStart=/usr/local/bin/cfn-hup
                [Install]
                WantedBy=default.target

            "/etc/cfn/cfn-hup.conf":
              mode: "000700"
              owner: "root"
              group: "root"
              content: !Sub |
                [main]
                stack=${AWS::StackName}

            "/etc/cfn/hooks.d/cfn-auto-reloader.conf":
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.BastionHost.Metadata.AWS::CloudFormation::Init
                action=/usr/local/bin/cfn-init -v --stack ${AWS::StackName} --resource BastionHost --region ${AWS::Region}
                runas=root
              mode: "000400"
              owner: "root"
              group: "root"

          commands:
            01_enable_cfn-hup:
              command: "systemctl enable cfn-hup"
            02_start_cfn-hup:
              command: "systemctl start cfn-hup"

        Install:
          files:
            "/usr/local/bin/update-route53-record.sh":
              mode: "000700"
              owner: "root"
              group: "root"
              content: !Sub |
                #!/usr/bin/env bash
                set -ex
                sleep 10
                ROUTE53_ZONE="${BastionHostRoute53Zone}"
                BASE_DNS=$(aws route53 get-hosted-zone --id $ROUTE53_ZONE --query "HostedZone.Name" --output text)
                DNS="${env}-${space}.${!BASE_DNS}"
                IP=$(curl http://instance-data/latest/meta-data/public-ipv4)
                cat > /tmp/update_record.json <<EOF
                {
                  "Changes": [
                    {
                      "Action": "UPSERT",
                      "ResourceRecordSet": {
                        "Name": "${!DNS}",
                        "Type": "A",
                        "TTL": 60,
                        "ResourceRecords": [
                          {
                            "Value": "${!IP}"
                          }
                        ]
                      }
                    }
                  ]
                }
                EOF
                aws route53 change-resource-record-sets --hosted-zone-id $ROUTE53_ZONE --change-batch file:///tmp/update_record.json

            "/etc/systemd/system/update-route53-record.service":
              mode: "000700"
              owner: "root"
              group: "root"
              content: |
                [Service]
                User=root
                ExecStart=/usr/local/bin/update-route53-record.sh
                [Install]
                WantedBy=default.target

          commands:
            01_enable_update-route53-record:
              command: "systemctl enable update-route53-record"
            02_start_update-route53-record:
              command: "systemctl start update-route53-record"

####### OUTPUTS
Outputs:
  BastionHost:
    Description: BastionHost
    Value: !Ref BastionHost